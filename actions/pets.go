package actions

import (
	"github.com/gobuffalo/buffalo"
	"github.com/kteb/pet_owner/models"
	"github.com/markbates/pop"
	"github.com/pkg/errors"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Pet)
// DB Table: Plural (pets)
// Resource: Plural (Pets)
// Path: Plural (/pets)
// View Template Folder: Plural (/templates/pets/)

// PetsResource is the resource for the Pet model
type PetsResource struct {
	buffalo.Resource
}

// List gets all Pets. This function is mapped to the path
// GET /pets
func (v PetsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	pop.MapTableName("PetOwner", "pets")
	petOwners := &models.PetOwners{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Pets from the DB
	err := q.Join("owners", " owners.id = pets.owner_id").All(petOwners)
	if err != nil {
		return errors.WithStack(err)
	}

	// Make Pets available inside the html template
	c.Set("pets", petOwners)

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.HTML("pets/index.html"))
}

// Show gets the data for one Pet. This function is mapped to
// the path GET /pets/{pet_id}
func (v PetsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	pop.MapTableName("Pet", "pets")

	// Allocate an empty Pet
	pet := &models.Pet{}

	// To find the Pet the parameter pet_id is used.
	if err := tx.Find(pet, c.Param("pet_id")); err != nil {
		return c.Error(404, err)
	}

	// Allocate an empty Owner
	owner := &models.Owner{}

	// To find the Owner the parameter owner_id is used.
	if err := tx.Find(owner, pet.OwnerID); err != nil {
		return c.Error(404, err)
	}

	// Make owner available inside the html template
	c.Set("owner", owner)

	// Make pet available inside the html template
	c.Set("pet", pet)

	return c.Render(200, r.HTML("pets/show.html"))
}

// New renders the form for creating a new Pet.
// This function is mapped to the path GET /pets/new
func (v PetsResource) New(c buffalo.Context) error {
	// Initialize the list of persons
	owners, err := selectOwners(c)

	if err != nil {
		return errors.WithStack(err)
	}

	// Make persons availble inside the html template
	c.Set("owners", owners)

	// Make pet available inside the html template
	c.Set("pet", &models.Pet{})

	return c.Render(200, r.HTML("pets/new.html"))
}

// Create adds a Pet to the DB. This function is mapped to the
// path POST /pets
func (v PetsResource) Create(c buffalo.Context) error {
	// Allocate an empty Pet
	pet := &models.Pet{}

	// Bind pet to the html form elements
	if err := c.Bind(pet); err != nil {
		return errors.WithStack(err)
	}

	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(pet)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make pet available inside the html template
		c.Set("pet", pet)

		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("pets/new.html"))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Pet was created successfully")

	// and redirect to the pets index page
	return c.Redirect(302, "/pets/%s", pet.ID)
}

// Edit renders a edit form for a Pet. This function is
// mapped to the path GET /pets/{pet_id}/edit
func (v PetsResource) Edit(c buffalo.Context) error {
	// Initialize the list of persons
	owners, err := selectOwners(c)

	if err != nil {
		return errors.WithStack(err)
	}

	pop.MapTableName("Pet", "pets")

	// Make persons availble inside the html template
	c.Set("owners", owners)

	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Allocate an empty Pet
	pet := &models.Pet{}

	if err := tx.Find(pet, c.Param("pet_id")); err != nil {
		return c.Error(404, err)
	}

	// Make pet available inside the html template
	c.Set("pet", pet)
	return c.Render(200, r.HTML("pets/edit.html"))
}

// Update changes a Pet in the DB. This function is mapped to
// the path PUT /pets/{pet_id}
func (v PetsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Allocate an empty Pet
	pet := &models.Pet{}

	if err := tx.Find(pet, c.Param("pet_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind Pet to the html form elements
	if err := c.Bind(pet); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(pet)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make pet available inside the html template
		c.Set("pet", pet)

		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("pets/edit.html"))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Pet was updated successfully")

	// and redirect to the pets index page
	return c.Redirect(302, "/pets/%s", pet.ID)
}

// Destroy deletes a Pet from the DB. This function is mapped
// to the path DELETE /pets/{pet_id}
func (v PetsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)

	// Allocate an empty Pet
	pet := &models.Pet{}

	// To find the Pet the parameter pet_id is used.
	if err := tx.Find(pet, c.Param("pet_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(pet); err != nil {
		return errors.WithStack(err)
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", "Pet was destroyed successfully")

	// Redirect to the pets index page
	return c.Redirect(302, "/pets")
}
